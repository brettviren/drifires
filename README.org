#+title: drifires - a drift/field responses calculator 

* Overview

~drifires~ calculates drift paths and field responses on electrodes as
induced current.  The heavy lifting is done by Garfield++.  ~libdrifers~
provides support for LAr and parameterized models for geometries
related to typical LArTPC detectors.  The ~drifires~ command line
interface produces diagnostic output and response data suitable for
use with Wire-Cell Toolkit.

* Install

** Requirements

- C++ compiler, Python (for "waf")
- ~nlohmann::json~
- ROOT
- Garfield++
- Jsonnet compiler (to regenerate configs)
- Wire-Cell Toolkit Python for some optional utilities

** Build

#+begin_example
  $ wget -O waf https://waf.io/waf-2.0.20
  $ chmod +x waf
  $ ./waf configure build install \
     --prefix          $HOME/opt/drifires \
     --with-nljs       $HOME/opt/nljs \
     --with-garfieldpp $HOME/opt/garfieldpp \
     --with-root       $HOME/opt/root
#+end_example

Adjust paths to match your environment.

* Running

~drifires-cli~ provides a command line interface to the functionality
which is fully driven by configuration.  Configuration is ultimately
in the form of JSON text and Jsonnet is preferred to construct that
JSON (though users are free to use other means).

Example configuration is provided for some detectors and different
geometries and "actions" under [[cfg/]].  And, top-level main structures
can be used with simple command line arguments.

For example to plot the drift paths for the ProtoDUNE-SP configuration:

#+begin_example
  $ jsonnet -J cfg -A action="drifts" -A filename="pdsp-drifts.pdf" \
    cfg/pdsp.jsonnet | drifires-cli
  $ mupdf pdsp-drifts.pdf
#+end_example

Produces:

[[file:docs/pdsp-drifts.png]]

A similar command will produce responses in a file which may be used
with the Wire-Cell Toolkit.

#+begin_example
  $ jsonnet -J cfg -A action="response" \
    cfg/pdsp.jsonnet | drifires-cli > pdsp-response.json
  $ bzip2 pdsp-response.json
#+end_example

With Wire-Cell Toolkit Python available one may plot the result:

#+begin_example
 $ wirecell-sigproc plot-response --trange=50,70 \
    pdsp-response.json.bz2 docs/pdsp-response-example.png
#+end_example

which produces:

#+ATTR_ORG: :width 800
[[file:docs/pdsp-response-example.png]]

* Library

- *all* numeric quantities are on Wire-Cell Toolkit system of units (aka what CLHEP uses and NOT what Garfield++ uses)

- classes which wrap Garfield++ classes and export Garfield++ methods do so changing their names from CamelCase to ~snake_case~.

- a factory mechanism is used to construct instances of these classes.  A "type" must be given and an optional instance "name" may be given.  The "type" is not necessarily matching any C++ class name.


